# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-01-26 16:57
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('price_a', models.DecimalField(decimal_places=0, default=0, max_digits=10, verbose_name='Цена кат. А')),
                ('price_b', models.DecimalField(decimal_places=0, default=0, max_digits=10, verbose_name='Цена кат. B')),
                ('price_c', models.DecimalField(decimal_places=0, default=0, max_digits=10, verbose_name='Цена кат. С')),
                ('price_d', models.DecimalField(decimal_places=0, default=0, max_digits=10, verbose_name='Цена кат. D')),
                ('price_trailer', models.DecimalField(decimal_places=0, default=0, max_digits=10, verbose_name='Цена за прицеп')),
                ('limit_per_day', models.PositiveIntegerField(default=0, verbose_name='Лимин на день')),
                ('requests_available', models.PositiveIntegerField(default=0, verbose_name='Доступно заявок')),
                ('credit', models.DecimalField(decimal_places=0, default=0, max_digits=10, verbose_name='Кредит')),
                ('balance', models.DecimalField(decimal_places=0, default=0, max_digits=10, verbose_name='Баланс')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': (('can_create_admin', 'Может создавать администраторов'), ('can_create_agent', 'Может создавать агентов'), ('can_create_manager', 'Может создавать менеджеров')),
            },
        ),
    ]
