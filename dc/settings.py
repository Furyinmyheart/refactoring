"""
Django settings for dc project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import raven

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import sys
from raven.exceptions import InvalidGitRepository

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'zNuLiTMLAtXKXPUJdXYyJMuZRw7BcV2REVjxRestNhNrA'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.getenv('DEBUG') == 'true' else False

ALLOWED_HOSTS = [
    'givedc.pro',
    'liketo.pro',
    'onlineto.pro',
    '127.0.0.1',
]
if os.getenv('ALLOWED_HOST'):
    ALLOWED_HOSTS.append(os.getenv('ALLOWED_HOST'))

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'dc.staticfiles_app_settings.MyStaticFilesConfig',
    'django_jinja',
    'mptt',
    'bootstrap3',
    'debug_toolbar',
    'rest_framework',
    'stronghold',
    'pipeline',
    'cards',
    'users',
    'alert_messages',
    'stantions',
    'finance',
    'agreements',
    'support',
]
if not DEBUG:
    INSTALLED_APPS.append('raven.contrib.django.raven_compat')

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'dc.middleware.MyLoginRequiredMiddleware',
    'dc.middleware.TimezoneMiddleware',
    'dc.middleware.EnableHttpsMiddleware',
]

ROOT_URLCONF = 'dc.urls'

TEMPLATES = [
    {
        'BACKEND': 'django_jinja.backend.Jinja2',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': False,
        "OPTIONS": {
            "globals": {
                "bootstrap_form": "bootstrap3.templatetags.bootstrap3.bootstrap_form",
                "bootstrap_field": "bootstrap3.templatetags.bootstrap3.bootstrap_field",
                "bootstrap_pagination": "bootstrap3.templatetags.bootstrap3.bootstrap_pagination",
                "bootstrap_form_errors": "bootstrap3.templatetags.bootstrap3.bootstrap_form_errors",
                "url_replace": "dc.tags.url_replace",
            },
            # Match the template names ending in .html but not the ones in the admin folder.
            "match_extension": ".html",
            "match_regex": r"^(?!admin/).*",
            "app_dirname": "templates",
            "extensions": [
                "jinja2.ext.do",
                "jinja2.ext.loopcontrols",
                "jinja2.ext.with_",
                "jinja2.ext.i18n",
                "jinja2.ext.autoescape",
                "django_jinja.builtins.extensions.CsrfExtension",
                "django_jinja.builtins.extensions.CacheExtension",
                "django_jinja.builtins.extensions.TimezoneExtension",
                "django_jinja.builtins.extensions.UrlsExtension",
                "django_jinja.builtins.extensions.StaticFilesExtension",
                "django_jinja.builtins.extensions.DjangoFiltersExtension",
                "pipeline.jinja2.PipelineExtension",
            ],
            "autoescape": True,
            "auto_reload": DEBUG,
            "translation_engine": "django.utils.translation",
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',
                'dc.context_processors.theme',
                'dc.context_processors.unread_messages',
            ],
        }
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dc.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
if os.getenv('WEB_DB_SERVICE') == 'postgresql':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ['POSTGRES_DB'],
            'USER': os.environ['POSTGRES_USER'],
            'PASSWORD': os.environ['POSTGRES_PASSWORD'],
            'HOST': os.environ['WEB_POSTGRES_HOST'],
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, "locale"),
]
# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "public/media")

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/media/'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'public/static')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

STATICFILES_STORAGE = 'pipeline.storage.PipelineCachedStorage'

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'pipeline.finders.PipelineFinder',
)

# pipeline
PIPELINE = {
    'PIPELINE_ENABLED': True if os.getenv('PIPELINE_ENABLED', 'true') == 'true' else False,
    'PIPELINE_COLLECTOR_ENABLED': True if os.getenv('PIPELINE_COLLECTOR_ENABLED', 'false') == 'true' else False,
    'CSS_COMPRESSOR': None,
    'JS_COMPRESSOR': None,
    'STYLESHEETS': {
        'css_frameworks': {
            'source_filenames': (
                'vendor/bootstrap/dist/css/bootstrap.min.css',
                'vendor/font-awesome/css/font-awesome.min.css',
                'vendor/get-shit-done/assets/css/gsdk.css',
            ),
            'output_filename': 'build/css/css_frameworks.css',
        },
        'css_registration_layout': {
            'source_filenames': (
                'vendor/bootstrap/dist/css/bootstrap.min.css',
                'vendor/font-awesome/css/font-awesome.min.css',
                'css/login-register.css',
                'css/login.css',
            ),
            'output_filename': 'build/css/css_registration_layout.css',
        },
        'css_main': {
            'source_filenames': (
                'css/main.css',
            ),
            'output_filename': 'build/css/main.css',
        },
        'requests_edit': {
            'source_filenames': (
                'vendor/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css',
                'css/typeahead.css',
            ),
            'output_filename': 'build/css/requests_edit.css',
        },
        'requests': {
            'source_filenames': (
                'vendor/bootstrap-daterangepicker/daterangepicker.css',
                'vendor/select2/dist/css/select2.min.css',
            ),
            'output_filename': 'build/css/requests.css',
        },
        'datetimepicker': {
            'source_filenames': (
                'vendor/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css',
            ),
            'output_filename': 'build/css/datetimepicker.css',
        },
        'daterangepicker': {
            'source_filenames': (
                'vendor/bootstrap-daterangepicker/daterangepicker.css',
            ),
            'output_filename': 'build/css/daterangepicker.css',
        },
        'select2': {
            'source_filenames': (
                'vendor/select2/dist/css/select2.min.css',
            ),
            'output_filename': 'build/css/select2.min.css',
        },
    },
    'JAVASCRIPT': {
        'js_framework': {
            'source_filenames': (
                'vendor/jquery/dist/jquery.min.js',
                'vendor/bootstrap/dist/js/bootstrap.min.js',
                'vendor/moment/min/moment.min.js',
                'vendor/moment/locale/ru.js',
                'vendor/remarkable-bootstrap-notify/dist/bootstrap-notify.min.js',
            ),
            'output_filename': 'build/js/js_framework.js',
        },
        'js_registration_layout': {
            'source_filenames': (
                'vendor/jquery/dist/jquery.min.js',
            ),
            'output_filename': 'build/js/js_registration_layout.js',
        },
        'js_main': {
            'source_filenames': (
                'js/main.js',
            ),
            'output_filename': 'build/js/main.js',
        },
        'dashboard': {
            'source_filenames': (
                'js/dashboard.js',
            ),
            'output_filename': 'build/js/dashboard.js',
        },
        'requests_edit': {
            'source_filenames': (
                'vendor/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js',
                'vendor/typeahead.js/dist/typeahead.bundle.min.js',
                'js/requests_edit.js',
            ),
            'output_filename': 'build/js/requests_edit.js',
        },
        'requests': {
            'source_filenames': (
                'vendor/select2/dist/js/select2.min.js',
                'vendor/bootstrap-daterangepicker/daterangepicker.js',
                'js/requests.js',
            ),
            'output_filename': 'build/js/requests.js',
        },
        'datetimepicker': {
            'source_filenames': (
                'vendor/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js',
            ),
            'output_filename': 'build/js/datetimepicker.js',
        },
        'daterangepicker': {
            'source_filenames': (
                'vendor/bootstrap-daterangepicker/daterangepicker.js',
            ),
            'output_filename': 'build/js/daterangepicker.js',
        },
        'select2': {
            'source_filenames': (
                'vendor/select2/dist/js/select2.min.js',
            ),
            'output_filename': 'build/js/select2.min.js',
        },
        'agreement_edit': {
            'source_filenames': (
                'js/agreement_edit.js',
            ),
            'output_filename': 'build/js/agreement_edit.js',
        },
        'finance': {
            'source_filenames': (
                'js/finance.js',
            ),
            'output_filename': 'build/js/finance.js',
        },
        'finance_stat': {
            'source_filenames': (
                'js/finance_stat.js',
            ),
            'output_filename': 'build/js/finance_stat.js',
        },
        'stantion_stat': {
            'source_filenames': (
                'js/stantion_stat.js',
            ),
            'output_filename': 'build/js/stantion_stat.js',
        },
        'message_create': {
            'source_filenames': (
                'js/message_create.js',
            ),
            'output_filename': 'build/js/message_create.js',
        },
        'messages': {
            'source_filenames': (
                'js/messages.js',
            ),
            'output_filename': 'build/js/messages.js',
        },
        'export': {
            'source_filenames': (
                'js/export.js',
            ),
            'output_filename': 'build/js/export.js',
        },
        'requests_stat': {
            'source_filenames': (
                'js/requests_stat.js',
            ),
            'output_filename': 'build/js/requests_stat.js',
        },
        'users': {
            'source_filenames': (
                'js/users.js',
            ),
            'output_filename': 'build/js/users.js',
        },
        'card_mass_search': {
            'source_filenames': (
                'js/card_mass_search.js',
            ),
            'output_filename': 'build/js/card_mass_search.js',
        },
        'generator_edit': {
            'source_filenames': (
                'js/generator_edit.js',
            ),
            'output_filename': 'build/js/generator_edit.js',
        },
        'users_view': {
            'source_filenames': (
                'js/users_view.js',
            ),
            'output_filename': 'build/js/users_view.js',
        },
    }
}

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'

AUTH_USER_MODEL = 'users.MyUser'

from django.contrib.messages import constants as messages_constants

MESSAGE_TAGS = {
    messages_constants.DEBUG: 'alert-info',
    messages_constants.INFO: 'alert-info',
    messages_constants.SUCCESS: 'alert-success',
    messages_constants.WARNING: 'alert-warning',
    messages_constants.ERROR: 'alert-danger',
}

# logging
CELERYD_HIJACK_ROOT_LOGGER = False

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'null': {
            'class': 'logging.NullHandler',
        },
        'console_error': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'verbose'
        },
        'sentry': {
            'level': 'ERROR',
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
            'filters': ['require_debug_false'],
            'tags': {'custom-tag': 'x'},
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'billing_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'dc/log/billing.log'),
            'maxBytes': 1000000,
            'backupCount': 2,
        },
        'api_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'dc/log/api.log'),
            'filters': ['require_debug_false'],
            'maxBytes': 10000000,
            'backupCount': 2,
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'console_error'],
        },
        'django.request': {
            'handlers': ['mail_admins', 'console_error'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'py.warnings': {
            'handlers': ['console'],
        },
        'billing': {
            'level': 'DEBUG',
            'handlers': ['billing_file'],
            'propagate': False,
        },
        'celery': {
            'handlers': ['console'],
            'level': 'ERROR',
        },
        'cards.tasks': {
            'handlers': ['console', 'api_file'],
            'level': 'DEBUG',
        },
        'users.tasks': {
            'handlers': ['console', 'api_file'],
            'level': 'DEBUG',
        },
        'stantions.tasks': {
            'handlers': ['console', 'api_file'],
            'level': 'DEBUG',
        },
    }
}
if not DEBUG:
    LOGGING['root'] = {'level': 'WARNING', 'handlers': ['sentry'], }

if DEBUG:
    INTERNAL_IPS = (
        '127.0.0.1',
    )

STRONGHOLD_PUBLIC_URLS = (
    r'^/login/',
    r'^/complete/',
    r'^/password_reset/',
    r'^/reset/',
)

DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    # original broken by django-jinja, remove this whole block later
    'dc.debug.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
]

MPTT_DEFAULT_LEVEL_INDICATOR = '-'

# celery
CELERY_ALWAYS_EAGER = True if os.getenv('CELERY_ALWAYS_EAGER') == 'true' else False
CELERY_EAGER_PROPAGATES_EXCEPTIONS = True if os.getenv('CELERY_EAGER_PROPAGATES_EXCEPTIONS') == 'true' else False

CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'amqp://guest:guest@192.168.56.102:5672//')
CELERY_RESULT_BACKEND = 'rpc://'

CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True
CELERY_RESULT_PERSISTENT = True
# 15 minutes
CELERY_TASK_RESULT_EXPIRES = 60 * 15

WORKER_URL = os.getenv('WORKER_URL', 'http://localhost:8080/')
WORKER_TIMEOUT = 250

DEFAULT_STAMP_IMAGE = './static/img/base_stamp.png'
DEFAULT_SIGNATURE_IMAGE = './static/img/base_signature.png'

# 2 hours
SESSION_COOKIE_AGE = 2 * 60 * 60

DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.getenv('EMAIL_HOST')
    EMAIL_PORT = os.getenv('EMAIL_PORT')
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', True)

RAVEN_CONFIG = {
    'dsn': 'https://6948df8b73d04502abb33cf335571547:114ef91ba2ff4b6a80faf545ab0707c9@sentry.io/146664',
}

try:
    # If you are using git, you can also automatically configure the
    # release based on the git info.
    RAVEN_CONFIG['release'] = raven.fetch_git_sha(os.path.dirname(os.pardir))
except InvalidGitRepository:
    pass
